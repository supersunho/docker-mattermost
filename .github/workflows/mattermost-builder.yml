name: Mattermost Multi-Arch Builder

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Mattermost version (e.g., v9.5.0, latest for newest)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mattermost

jobs:
  check-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_clean: ${{ steps.get-version.outputs.version_clean }}
      release_notes: ${{ steps.get-version.outputs.release_notes }}
      build_enterprise: ${{ steps.check-images.outputs.build_enterprise }}
      build_team: ${{ steps.check-images.outputs.build_team }}
      registry_url: ${{ steps.set-vars.outputs.registry_url }}
      repo_name: ${{ steps.set-vars.outputs.repo_name }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          echo "registry_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Get target version
        id: get-version
        run: |
          if [ "${{ github.event.inputs.version }}" = "latest" ] || [ "${{ github.event.inputs.version }}" = "" ]; then
            echo "üîç Checking latest Mattermost version..."
            RELEASE_DATA=$(curl -s https://api.github.com/repos/mattermost/mattermost/releases/latest)
            VERSION=$(echo "$RELEASE_DATA" | jq -r .tag_name)
            RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r .body | head -c 500)
          else
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_NOTES="Manual build for version $VERSION"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üìã Target version: $VERSION"

      - name: Check existing images
        id: check-images
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Check Enterprise image
          ENTERPRISE_TAG="${VERSION}-enterprise"
          echo "üîç Checking Enterprise image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$ENTERPRISE_TAG"
          
          ENTERPRISE_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$ENTERPRISE_TAG")
          
          if [ "$ENTERPRISE_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "‚è≠Ô∏è Enterprise image already exists: $ENTERPRISE_TAG"
            echo "build_enterprise=false" >> $GITHUB_OUTPUT
          else
            echo "üÜï Will build Enterprise image: $ENTERPRISE_TAG"
            echo "build_enterprise=true" >> $GITHUB_OUTPUT
          fi
          
          # Check Team image
          TEAM_TAG="${VERSION}-team"
          echo "üîç Checking Team image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TEAM_TAG"
          
          TEAM_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$TEAM_TAG")
          
          if [ "$TEAM_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "‚è≠Ô∏è Team image already exists: $TEAM_TAG"
            echo "build_team=false" >> $GITHUB_OUTPUT
          else
            echo "üÜï Will build Team image: $TEAM_TAG"
            echo "build_team=true" >> $GITHUB_OUTPUT
          fi

  build-enterprise:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_enterprise == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Mattermost source
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Enterprise
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-and-prepare.outputs.version }}-enterprise
            type=raw,value=latest-enterprise
          labels: |
            org.opencontainers.image.title=Mattermost Multi-Arch (Enterprise)
            org.opencontainers.image.description=Mattermost Enterprise server with multi-architecture support (AMD64, ARM64)
            org.opencontainers.image.version=${{ needs.check-and-prepare.outputs.version }}

      - name: Build and push Enterprise edition
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=enterprise
          cache-to: type=gha,mode=max,scope=enterprise

      - name: Verify Enterprise image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-enterprise"
          echo "üîç Verifying Enterprise multi-arch image..."
          docker buildx imagetools inspect "$IMAGE"
          echo "‚úÖ Enterprise multi-arch build completed!"

  build-team:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_team == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Mattermost source
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Prepare Team edition Dockerfile
        run: |
          cd mattermost-source
          echo "üîß Modifying Dockerfile for Team edition..."
          sed -i 's|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-enterprise-linux"|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-team-linux"|g' server/build/Dockerfile
          echo "üìù Modified MM_PACKAGE for Team edition"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Team
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-and-prepare.outputs.version }}-team
            type=raw,value=latest-team
          labels: |
            org.opencontainers.image.title=Mattermost Multi-Arch (Team)
            org.opencontainers.image.description=Mattermost Team server with multi-architecture support (AMD64, ARM64)
            org.opencontainers.image.version=${{ needs.check-and-prepare.outputs.version }}

      - name: Build and push Team edition
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=team
          cache-to: type=gha,mode=max,scope=team

      - name: Verify Team image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-team"
          echo "üîç Verifying Team multi-arch image..."
          docker buildx imagetools inspect "$IMAGE"
          echo "‚úÖ Team multi-arch build completed!"

  create-release:
    needs: [check-and-prepare, build-enterprise, build-team]
    if: always() && (needs.build-enterprise.result == 'success' || needs.build-team.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-and-prepare.outputs.version }}
          name: "Mattermost Multi-Arch ${{ needs.check-and-prepare.outputs.version }}"
          body: |
            # üöÄ Mattermost Multi-Architecture Build ${{ needs.check-and-prepare.outputs.version }}
            
            Multi-architecture Mattermost server images supporting various platforms.
            
            ## üèóÔ∏è Supported Architectures
            - **AMD64** (x86_64) - Standard servers and desktop environments
            - **ARM64** (AArch64) - Apple Silicon, AWS Graviton, Raspberry Pi 4+, etc.
            
            ## üì• Usage
            
            ### Enterprise Edition
            ```
            # Docker run
            docker run -d \
              --name mattermost-enterprise \
              -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise
            
            # Docker Compose
            services:
              mattermost:
                image: ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise
                ports:
                  - "8065:8065"
            ```
            
            ### Team Edition
            ```
            # Docker run
            docker run -d \
              --name mattermost-team \
              -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team
            
            # Docker Compose
            services:
              mattermost:
                image: ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team
                ports:
                  - "8065:8065"
            ```
            
            ## üì¶ Build Results
            ${{ needs.build-enterprise.result == 'success' && format('‚úÖ **Enterprise Edition**: `{0}:{1}-enterprise`', needs.check-and-prepare.outputs.registry_url, needs.check-and-prepare.outputs.version) || '‚è≠Ô∏è **Enterprise Edition**: Using existing image' }}
            
            ${{ needs.build-team.result == 'success' && format('‚úÖ **Team Edition**: `{0}:{1}-team`', needs.check-and-prepare.outputs.registry_url, needs.check-and-prepare.outputs.version) || '‚è≠Ô∏è **Team Edition**: Using existing image' }}
            
            ## üìã Edition Differences
            - **Enterprise**: Full feature set (commercial license required)
            - **Team**: Core features only (fully open source)
            
            ## üîó Available Images
            - **Enterprise**: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise`
            - **Team**: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team`
            - **Latest Enterprise**: `${{ needs.check-and-prepare.outputs.registry_url }}:latest-enterprise`
            - **Latest Team**: `${{ needs.check-and-prepare.outputs.registry_url }}:latest-team`
            
            ---
            **Source Repository**: [mattermost/mattermost](https://github.com/mattermost/mattermost/releases/tag/${{ needs.check-and-prepare.outputs.version }})
            
            **Build Environment**: GitHub Actions Multi-Architecture Build
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [check-and-prepare, build-enterprise, build-team, create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## üèóÔ∏è Mattermost Multi-Architecture Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.check-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ needs.check-and-prepare.outputs.repo_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Supported Architectures**: AMD64 (x86_64), ARM64 (AArch64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Enterprise results
          if [ "${{ needs.check-and-prepare.outputs.build_enterprise }}" = "true" ]; then
            if [ "${{ needs.build-enterprise.result }}" = "success" ]; then
              echo "‚úÖ **Enterprise Edition**: Multi-arch build successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Enterprise Edition**: Build failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Enterprise Edition**: Using existing image (build skipped)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Team results
          if [ "${{ needs.check-and-prepare.outputs.build_team }}" = "true" ]; then
            if [ "${{ needs.build-team.result }}" = "success" ]; then
              echo "‚úÖ **Team Edition**: Multi-arch build successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Team Edition**: Build failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Team Edition**: Using existing image (build skipped)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Image URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Enterprise**: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Team**: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Platform Compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64**: Intel/AMD processors (standard servers, PCs)" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64**: ARM processors (Apple Silicon, AWS Graviton, Raspberry Pi)" >> $GITHUB_STEP_SUMMARY
