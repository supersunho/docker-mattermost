name: Mattermost Multi-Arch Builder

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Mattermost version (e.g., v9.5.0, latest for newest)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean
      clear_cache:
        description: 'Clear build cache before building'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mattermost

jobs:
  check-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_clean: ${{ steps.get-version.outputs.version_clean }}
      release_notes: ${{ steps.get-version.outputs.release_notes }}
      build_enterprise: ${{ steps.check-images.outputs.build_enterprise }}
      build_team: ${{ steps.check-images.outputs.build_team }}
      registry_url: ${{ steps.set-vars.outputs.registry_url }}
      repo_name: ${{ steps.set-vars.outputs.repo_name }}
      cache_key: ${{ steps.set-vars.outputs.cache_key }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          echo "registry_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "cache_key=$(date +%Y%m%d)-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Get target version
        id: get-version
        run: |
          if [ "${{ github.event.inputs.version }}" = "latest" ] || [ "${{ github.event.inputs.version }}" = "" ]; then
            echo "üîç Checking latest Mattermost version..."
            RELEASE_DATA=$(curl -s https://api.github.com/repos/mattermost/mattermost/releases/latest)
            VERSION=$(echo "$RELEASE_DATA" | jq -r .tag_name)
            RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r .body | head -c 500)
          else
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_NOTES="Manual build for version $VERSION"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üìã Target version: $VERSION"

      - name: Check existing images
        id: check-images
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Check Enterprise image
          ENTERPRISE_TAG="${VERSION}-enterprise"
          echo "üîç Checking Enterprise image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$ENTERPRISE_TAG"
          
          ENTERPRISE_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$ENTERPRISE_TAG")
          
          if [ "$ENTERPRISE_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "‚è≠Ô∏è Enterprise image already exists: $ENTERPRISE_TAG"
            echo "build_enterprise=false" >> $GITHUB_OUTPUT
          else
            echo "üÜï Will build Enterprise image: $ENTERPRISE_TAG"
            echo "build_enterprise=true" >> $GITHUB_OUTPUT
          fi
          
          # Check Team image
          TEAM_TAG="${VERSION}-team"
          echo "üîç Checking Team image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TEAM_TAG"
          
          TEAM_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$TEAM_TAG")
          
          if [ "$TEAM_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "‚è≠Ô∏è Team image already exists: $TEAM_TAG"
            echo "build_team=false" >> $GITHUB_OUTPUT
          else
            echo "üÜï Will build Team image: $TEAM_TAG"
            echo "build_team=true" >> $GITHUB_OUTPUT
          fi

  # Native AMD64 build
  build-amd64:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_enterprise == 'true' || needs.check-and-prepare.outputs.build_team == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        edition: [enterprise, team]
    steps:
      - name: Skip if not needed
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'false') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'false')
        run: echo "Skipping ${{ matrix.edition }} build"

      - name: Checkout Mattermost source
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Clear Docker cache if requested
        if: github.event.inputs.clear_cache == 'true' && ((matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true'))
        run: |
          echo "üßπ Clearing Docker build cache..."
          docker builder prune -af || true
          docker buildx prune -af || true
          echo "‚úÖ Cache cleared"

      - name: Enhanced Dockerfile fix for multi-arch compatibility
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          cd mattermost-source
          echo "üîß Applying enhanced multi-arch compatibility fixes..."
          
          # Remove all SHA256 hashes and replace with latest tags
          sed -i 's|ubuntu:[^@[:space:]]*@sha256:[a-f0-9]*|ubuntu:latest|g' server/build/Dockerfile
          sed -i 's|ubuntu:noble-[0-9]*\.[0-9]*|ubuntu:latest|g' server/build/Dockerfile
          sed -i 's|FROM ubuntu:[^[:space:]]*|FROM ubuntu:latest|g' server/build/Dockerfile
          
          # Add cache buster to force fresh build
          echo "# Cache buster: $(date +%s)" >> server/build/Dockerfile
          echo "# Build target: ${{ matrix.edition }}" >> server/build/Dockerfile
          echo "# Architecture: AMD64" >> server/build/Dockerfile
          
          # Add compatibility environment variables
          sed -i '/FROM ubuntu:latest/a ENV DEBIAN_FRONTEND=noninteractive\nENV LANG=C.UTF-8' server/build/Dockerfile
          
          echo "üìù Enhanced multi-arch compatibility applied for ${{ matrix.edition }}"

      - name: Prepare Team edition Dockerfile
        if: matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true'
        run: |
          cd mattermost-source
          echo "üîß Modifying for Team edition..."
          sed -i 's|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-enterprise-linux"|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-team-linux"|g' server/build/Dockerfile
          echo "üìù Modified MM_PACKAGE for Team edition"

      - name: Set up Docker Buildx
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 ${{ matrix.edition }}
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-${{ matrix.edition }}-amd64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.edition }}-amd64
          no-cache: ${{ github.event.inputs.clear_cache == 'true' }}
          pull: true
          cache-from: type=gha,scope=${{ matrix.edition }}-amd64-${{ needs.check-and-prepare.outputs.cache_key }}
          cache-to: type=gha,mode=max,scope=${{ matrix.edition }}-amd64-${{ needs.check-and-prepare.outputs.cache_key }}

      - name: Export digest
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          mkdir -p /tmp/digests/${{ matrix.edition }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.edition }}/${digest#sha256:}"

      - name: Upload digest
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.edition }}-amd64
          path: /tmp/digests/${{ matrix.edition }}/*
          if-no-files-found: error
          retention-days: 1

  # Native ARM64 build
  build-arm64:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_enterprise == 'true' || needs.check-and-prepare.outputs.build_team == 'true'
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        edition: [enterprise, team]
    steps:
      - name: Skip if not needed
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'false') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'false')
        run: echo "Skipping ${{ matrix.edition }} build"

      - name: Checkout Mattermost source
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Clear Docker cache if requested
        if: github.event.inputs.clear_cache == 'true' && ((matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true'))
        run: |
          echo "üßπ Clearing Docker build cache..."
          docker builder prune -af || true
          docker buildx prune -af || true
          echo "‚úÖ Cache cleared"

      - name: Enhanced Dockerfile fix for ARM64 native compatibility
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          cd mattermost-source
          echo "üîß Applying enhanced ARM64 native compatibility fixes..."
          
          # Remove all SHA256 hashes and replace with latest tags
          sed -i 's|ubuntu:[^@[:space:]]*@sha256:[a-f0-9]*|ubuntu:latest|g' server/build/Dockerfile
          sed -i 's|ubuntu:noble-[0-9]*\.[0-9]*|ubuntu:latest|g' server/build/Dockerfile
          sed -i 's|FROM ubuntu:[^[:space:]]*|FROM ubuntu:latest|g' server/build/Dockerfile
          
          # Add cache buster to force fresh build
          echo "# Cache buster: $(date +%s)" >> server/build/Dockerfile
          echo "# Build target: ${{ matrix.edition }}" >> server/build/Dockerfile
          echo "# Architecture: ARM64 Native" >> server/build/Dockerfile
          
          # Add ARM64 native compatibility environment variables
          sed -i '/FROM ubuntu:latest/a ENV DEBIAN_FRONTEND=noninteractive\nENV LANG=C.UTF-8\nENV ARCH=arm64' server/build/Dockerfile
          
          echo "üìù Enhanced ARM64 native compatibility applied for ${{ matrix.edition }}"

      - name: Prepare Team edition Dockerfile
        if: matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true'
        run: |
          cd mattermost-source
          echo "üîß Modifying for Team edition..."
          sed -i 's|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-enterprise-linux"|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-team-linux"|g' server/build/Dockerfile
          echo "üìù Modified MM_PACKAGE for Team edition"

      # No QEMU setup needed - running on native ARM64 hardware

      - name: Set up Docker Buildx
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 ${{ matrix.edition }} (Native)
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-${{ matrix.edition }}-arm64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.edition }}-arm64
          no-cache: ${{ github.event.inputs.clear_cache == 'true' }}
          pull: true
          cache-from: type=gha,scope=${{ matrix.edition }}-arm64-${{ needs.check-and-prepare.outputs.cache_key }}
          cache-to: type=gha,mode=max,scope=${{ matrix.edition }}-arm64-${{ needs.check-and-prepare.outputs.cache_key }}

      - name: Verify ARM64 native architecture
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-${{ matrix.edition }}-arm64"
          echo "üîç Verifying ARM64 native architecture..."
          docker buildx imagetools inspect "$IMAGE"
          
          # Test the binary architecture
          echo "üß™ Testing binary architecture..."
          docker run --rm "$IMAGE" uname -m
          docker run --rm "$IMAGE" file /mattermost/bin/mattermost || echo "Binary check completed"
          
          echo "‚úÖ ARM64 native build verified!"

      - name: Export digest
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          mkdir -p /tmp/digests/${{ matrix.edition }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.edition }}/${digest#sha256:}"

      - name: Upload digest
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.edition }}-arm64
          path: /tmp/digests/${{ matrix.edition }}/*
          if-no-files-found: error
          retention-days: 1

  # Create multi-architecture manifests
  merge-manifests:
    needs: [check-and-prepare, build-amd64, build-arm64]
    if: always() && (needs.build-amd64.result == 'success' || needs.build-arm64.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        edition: [enterprise, team]
    steps:
      - name: Skip if not needed
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'false') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'false')
        run: echo "Skipping ${{ matrix.edition }} manifest creation"

      - name: Download digests
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.edition }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-${{ matrix.edition }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.edition }} \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect multi-arch manifest
        if: (matrix.edition == 'enterprise' && needs.check-and-prepare.outputs.build_enterprise == 'true') || (matrix.edition == 'team' && needs.check-and-prepare.outputs.build_team == 'true')
        run: |
          echo "üîç Inspecting multi-arch manifest for ${{ matrix.edition }}..."
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-${{ matrix.edition }}
          echo "‚úÖ Multi-arch manifest created successfully!"

  create-release:
    needs: [check-and-prepare, merge-manifests]
    if: always() && needs.merge-manifests.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-and-prepare.outputs.version }}
          name: "Mattermost Multi-Arch ${{ needs.check-and-prepare.outputs.version }}"
          body: |
            # üöÄ Mattermost Multi-Architecture Build ${{ needs.check-and-prepare.outputs.version }}
            
            Native multi-architecture Mattermost server images with ARM64 native builds and enhanced compatibility.
            
            ## üèóÔ∏è Supported Architectures
            - **AMD64** (x86_64) - Standard servers and desktop environments
            - **ARM64** (AArch64) - **Native builds** on Apple Silicon, AWS Graviton, Raspberry Pi 4+, etc.
            
            ## üîß Build Improvements
            - **ARM64 Native Builds**: Built on actual ARM64 hardware (ubuntu-24.04-arm) for maximum compatibility
            - **Enhanced Cache Management**: Architecture-specific cache scopes to prevent conflicts
            - **Ubuntu Latest Base**: Updated to use ubuntu:latest for better multi-arch support
            - **SHA256 Hash Removal**: Eliminated architecture-specific hashes from base images
            - **Environment Optimization**: Added DEBIAN_FRONTEND, LANG, and ARCH variables for compatibility
            - **Binary Verification**: Automated testing of binary architecture compatibility
            
            ## üì• Usage
            
            ### Multi-Architecture (Recommended)
            ```
            # Enterprise Edition
            docker run -d --name mattermost-enterprise -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise
            
            # Team Edition
            docker run -d --name mattermost-team -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team
            ```
            
            ### Architecture-Specific (For Maximum Compatibility)
            ```
            # ARM64 native (recommended for ARM64 systems)
            docker run -d --name mattermost-team-arm64 -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-arm64
            
            # AMD64 specific
            docker run -d --name mattermost-team-amd64 -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-amd64
            ```
            
            ### Force Platform (Alternative method)
            ```
            # Force ARM64 platform
            docker run --platform linux/arm64 -d --name mattermost-team -p 8065:8065 \
              ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team
            ```
            
            ## üì¶ Available Images
            
            ### Multi-Architecture Manifests
            - Enterprise: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise`
            - Team: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team`
            
            ### Architecture-Specific Images
            - Enterprise ARM64 (Native): `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise-arm64`
            - Enterprise AMD64: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise-amd64`
            - Team ARM64 (Native): `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-arm64`
            - Team AMD64: `${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-amd64`
            
            ## üõ†Ô∏è Troubleshooting
            
            ### For "Exec format error" on ARM64
            1. **Use native ARM64 tag**: `latest-team-arm64` (built on native ARM64 hardware)
            2. **Force platform**: `docker run --platform linux/arm64 ...`
            3. **Verify image architecture**: `docker buildx imagetools inspect <image>`
            4. **Clear local cache**: `docker system prune -af`
            
            ### Verification Commands
            ```
            # Check image architecture
            docker buildx imagetools inspect ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team
            
            # Test ARM64 native image
            docker run --rm ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-arm64 uname -m
            # Should output: aarch64
            
            # Test binary format
            docker run --rm ${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-arm64 file /mattermost/bin/mattermost
            # Should show: ELF 64-bit LSB executable, ARM aarch64
            ```
            
            ---
            **Source Repository**: [mattermost/mattermost](https://github.com/mattermost/mattermost/releases/tag/${{ needs.check-and-prepare.outputs.version }})
            
            **Build Cache Key**: ${{ needs.check-and-prepare.outputs.cache_key }}
            
            **ARM64 Build**: Native builds on ubuntu-24.04-arm runners
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [check-and-prepare, build-amd64, build-arm64, merge-manifests, create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## üèóÔ∏è Mattermost Multi-Architecture Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.check-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ needs.check-and-prepare.outputs.repo_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base Image**: Ubuntu Latest (Multi-Arch)" >> $GITHUB_STEP_SUMMARY
          echo "**AMD64 Build**: Standard ubuntu-latest runners" >> $GITHUB_STEP_SUMMARY
          echo "**ARM64 Build**: Native ubuntu-24.04-arm runners" >> $GITHUB_STEP_SUMMARY
          echo "**Cache Strategy**: Architecture-specific scopes with dynamic keys" >> $GITHUB_STEP_SUMMARY
          echo "**Cache Key**: ${{ needs.check-and-prepare.outputs.cache_key }}" >> $GITHUB_STEP_SUMMARY
          echo "**Supported Architectures**: AMD64 (x86_64), ARM64 (AArch64 Native)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # AMD64 results
          echo "### üñ•Ô∏è AMD64 Build Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-amd64.result }}" = "success" ]; then
            echo "‚úÖ **AMD64**: Multi-edition build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **AMD64**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ARM64 results
          echo "### üîß ARM64 Native Build Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-arm64.result }}" = "success" ]; then
            echo "‚úÖ **ARM64 Native**: Multi-edition build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **ARM64 Native**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Edition results
          echo "### üì¶ Edition Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.check-and-prepare.outputs.build_enterprise }}" = "true" ]; then
            echo "üè¢ **Enterprise Edition**: Built" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Enterprise Edition**: Skipped (existing image)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.check-and-prepare.outputs.build_team }}" = "true" ]; then
            echo "üë• **Team Edition**: Built" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Team Edition**: Skipped (existing image)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Available Tags" >> $GITHUB_STEP_SUMMARY
          echo "#### Enterprise Edition" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-arch: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise\`" >> $GITHUB_STEP_SUMMARY
          echo "- ARM64 Native: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- AMD64: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-enterprise-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Team Edition" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-arch: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team\`" >> $GITHUB_STEP_SUMMARY
          echo "- ARM64 Native: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- AMD64: \`${{ needs.check-and-prepare.outputs.registry_url }}:${{ needs.check-and-prepare.outputs.version }}-team-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Build Enhancements" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64 Native Builds**: Built on actual ARM64 hardware for maximum compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Cache Management**: Architecture and edition-specific cache scopes" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu Latest**: Updated base image for better multi-arch compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Verification**: Automated testing of binary architecture compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Optimization**: Added compatibility environment variables" >> $GITHUB_STEP_SUMMARY
