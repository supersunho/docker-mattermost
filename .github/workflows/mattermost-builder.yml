name: Mattermost Builder

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Mattermost version (e.g., v9.5.0, latest for newest)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mattermost

jobs:
  check-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_clean: ${{ steps.get-version.outputs.version_clean }}
      release_notes: ${{ steps.get-version.outputs.release_notes }}
      build_enterprise: ${{ steps.check-images.outputs.build_enterprise }}
      build_team: ${{ steps.check-images.outputs.build_team }}
    steps:
      - name: Get target version
        id: get-version
        run: |
          if [ "${{ github.event.inputs.version }}" = "latest" ] || [ "${{ github.event.inputs.version }}" = "" ]; then
            echo "🔍 최신 Mattermost 버전 확인 중..."
            RELEASE_DATA=$(curl -s https://api.github.com/repos/mattermost/mattermost/releases/latest)
            VERSION=$(echo "$RELEASE_DATA" | jq -r .tag_name)
            RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r .body | head -c 500)
          else
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_NOTES="Manual build for version $VERSION"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📋 대상 버전: $VERSION"

      - name: Check existing images
        id: check-images
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Enterprise 이미지 확인
          ENTERPRISE_TAG="${VERSION}-enterprise"
          echo "🔍 Enterprise 이미지 확인: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$ENTERPRISE_TAG"
          
          ENTERPRISE_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$ENTERPRISE_TAG")
          
          if [ "$ENTERPRISE_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "⏭️ Enterprise 이미지가 이미 존재합니다: $ENTERPRISE_TAG"
            echo "build_enterprise=false" >> $GITHUB_OUTPUT
          else
            echo "🆕 Enterprise 이미지를 빌드합니다: $ENTERPRISE_TAG"
            echo "build_enterprise=true" >> $GITHUB_OUTPUT
          fi
          
          # Team 이미지 확인
          TEAM_TAG="${VERSION}-team"
          echo "🔍 Team 이미지 확인: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TEAM_TAG"
          
          TEAM_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$TEAM_TAG")
          
          if [ "$TEAM_HTTP_CODE" = "200" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "⏭️ Team 이미지가 이미 존재합니다: $TEAM_TAG"
            echo "build_team=false" >> $GITHUB_OUTPUT
          else
            echo "🆕 Team 이미지를 빌드합니다: $TEAM_TAG"
            echo "build_team=true" >> $GITHUB_OUTPUT
          fi

  build-enterprise:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_enterprise == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Mattermost source
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Enterprise
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-and-prepare.outputs.version }}-enterprise
            type=raw,value=latest-enterprise
          labels: |
            org.opencontainers.image.title=Mattermost ARM64 (Enterprise)
            org.opencontainers.image.description=Mattermost Enterprise server with ARM64 support
            org.opencontainers.image.version=${{ needs.check-and-prepare.outputs.version }}

      - name: Build and push Enterprise edition
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=enterprise
          cache-to: type=gha,mode=max,scope=enterprise

      - name: Verify Enterprise image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-enterprise"
          echo "🔍 Enterprise 이미지 검증 중..."
          docker buildx imagetools inspect "$IMAGE"
          echo "✅ Enterprise 빌드 완료!"

  build-team:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.build_team == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Mattermost source
        uses: actions/checkout@v4
        with:
          repository: mattermost/mattermost
          ref: ${{ needs.check-and-prepare.outputs.version }}
          path: mattermost-source

      - name: Prepare Team edition Dockerfile
        run: |
          cd mattermost-source
          echo "🔧 Team edition을 위한 Dockerfile 수정 중..."
          sed -i 's|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-enterprise-linux"|ARG MM_PACKAGE="https://latest.mattermost.com/mattermost-team-linux"|g' server/build/Dockerfile
          echo "📝 Team edition MM_PACKAGE로 수정 완료"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Team
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-and-prepare.outputs.version }}-team
            type=raw,value=latest-team
          labels: |
            org.opencontainers.image.title=Mattermost ARM64 (Team)
            org.opencontainers.image.description=Mattermost Team server with ARM64 support
            org.opencontainers.image.version=${{ needs.check-and-prepare.outputs.version }}

      - name: Build and push Team edition
        uses: docker/build-push-action@v5
        with:
          context: ./mattermost-source/server/build
          file: ./mattermost-source/server/build/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=team
          cache-to: type=gha,mode=max,scope=team

      - name: Verify Team image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-team"
          echo "🔍 Team 이미지 검증 중..."
          docker buildx imagetools inspect "$IMAGE"
          echo "✅ Team 빌드 완료!"

  create-release:
    needs: [check-and-prepare, build-enterprise, build-team]
    if: always() && (needs.build-enterprise.result == 'success' || needs.build-team.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-and-prepare.outputs.version }}
          name: "Mattermost ARM64 ${{ needs.check-and-prepare.outputs.version }}"
          body: |
            # 🚀 Mattermost ARM64 빌드 ${{ needs.check-and-prepare.outputs.version }}
            
            ARM64 및 AMD64 아키텍처를 지원하는 Mattermost 서버 이미지입니다.
            
            ## 📥 사용 방법
            
            ### Enterprise Edition
            ```
            docker run -d \
              --name mattermost-enterprise \
              -p 8065:8065 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-enterprise
            ```
            
            ### Team Edition
            ```
            docker run -d \
              --name mattermost-team \
              -p 8065:8065 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-team
            ```
            
            ## 🏗️ 지원 아키텍처
            - `linux/arm64` - ARM64 프로세서 (Apple Silicon, Raspberry Pi 등)
            - `linux/amd64` - x86_64 프로세서
            
            ## 📦 빌드된 이미지
            ${{ needs.build-enterprise.result == 'success' && '✅ **Enterprise**: `ghcr.io/your-repo/mattermost:latest-enterprise`' || '⏭️ **Enterprise**: 기존 이미지 사용' }}
            
            ${{ needs.build-team.result == 'success' && '✅ **Team**: `ghcr.io/your-repo/mattermost:latest-team`' || '⏭️ **Team**: 기존 이미지 사용' }}
            
            ---
            **원본**: [mattermost/mattermost](https://github.com/mattermost/mattermost/releases/tag/${{ needs.check-and-prepare.outputs.version }})
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [check-and-prepare, build-enterprise, build-team, create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## 🏗️ Mattermost ARM64 빌드 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**버전**: ${{ needs.check-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Enterprise 결과
          if [ "${{ needs.check-and-prepare.outputs.build_enterprise }}" = "true" ]; then
            if [ "${{ needs.build-enterprise.result }}" = "success" ]; then
              echo "✅ **Enterprise**: 빌드 성공" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Enterprise**: 빌드 실패" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Enterprise**: 기존 이미지 사용" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Team 결과
          if [ "${{ needs.check-and-prepare.outputs.build_team }}" = "true" ]; then
            if [ "${{ needs.build-team.result }}" = "success" ]; then
              echo "✅ **Team**: 빌드 성공" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Team**: 빌드 실패" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Team**: 기존 이미지 사용" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 이미지 주소" >> $GITHUB_STEP_SUMMARY
          echo "- **Enterprise**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-enterprise\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Team**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}-team\`" >> $GITHUB_STEP_SUMMARY
