name: Mattermost Builder

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Mattermost version (e.g., v9.5.0, latest for newest)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mattermost

jobs:
  check-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_clean: ${{ steps.get-version.outputs.version_clean }}
      should_build: ${{ steps.check-existing.outputs.should_build }}
      release_notes: ${{ steps.get-version.outputs.release_notes }}
    steps:
      - name: Get target version
        id: get-version
        run: |
          if [ "${{ github.event.inputs.version }}" = "latest" ] || [ "${{ github.event.inputs.version }}" = "" ]; then
            echo "🔍 최신 Mattermost 버전 확인 중..."
            RELEASE_DATA=$(curl -s https://api.github.com/repos/mattermost/mattermost/releases/latest)
            VERSION=$(echo "$RELEASE_DATA" | jq -r .tag_name)
            RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r .body | head -c 500)
          else
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_NOTES="Manual build for version $VERSION"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📋 대상 버전: $VERSION"

      - name: Check if image already exists
        id: check-existing
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          echo "🔍 기존 이미지 확인 중: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/mattermost/manifests/$VERSION")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ 이미지가 이미 존재합니다: $VERSION"
            if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
              echo "🔄 강제 재빌드가 활성화되어 빌드를 진행합니다"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️ 빌드를 건너뜁니다"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "🆕 새로운 버전 발견, 빌드를 진행합니다: $VERSION"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-multiarch:
    needs: check-and-prepare
    if: needs.check-and-prepare.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-and-prepare.outputs.version }}
            type=raw,value=${{ needs.check-and-prepare.outputs.version_clean }}
            type=raw,value=latest

      - name: Build and push multi-architecture image
        uses: docker/build-push-action@v5
        with:
          context: https://github.com/mattermost/mattermost.git#${{ needs.check-and-prepare.outputs.version }}
          file: server/build/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image
        run: |
          VERSION="${{ needs.check-and-prepare.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          
          echo "🔍 이미지 검증 중..."
          docker buildx imagetools inspect "$IMAGE"
          
          echo "✅ 빌드 완료!"
          echo "📦 이미지: $IMAGE"

  create-release:
    needs: [check-and-prepare, build-multiarch]
    if: needs.check-and-prepare.outputs.should_build == 'true' && needs.build-multiarch.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-and-prepare.outputs.version }}
          name: "Mattermost ARM64 ${{ needs.check-and-prepare.outputs.version }}"
          body: |
            # 🚀 Mattermost ARM64 빌드 ${{ needs.check-and-prepare.outputs.version }}
            
            ## 📥 사용 방법
            ```
            docker run -d --name mattermost -p 8065:8065 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-and-prepare.outputs.version }}
            ```
            
            ## 🏗️ 지원 아키텍처
            - linux/arm64
            - linux/amd64
            
            **원본**: [mattermost/mattermost](https://github.com/mattermost/mattermost/releases/tag/${{ needs.check-and-prepare.outputs.version }})
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
